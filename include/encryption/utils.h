#ifndef UTILS_H
#define UTILS_H

#include <string>
#include <vector>
#include <cstdint>
#include "external/logger.h"

namespace Utils {

    /**
     * @brief Computes HMAC-SHA256 of the data using the given key.
     *
     * @param data The vector of data to compute the HMAC for.
     * @param key The key for the HMAC.
     * @return std::vector<uint8_t> The computed HMAC (32 bytes).
     * @throws std::runtime_error If an error occurs during HMAC computation.
     */
    std::vector<uint8_t> computeHMAC(const std::vector<uint8_t>& data, const std::vector<uint8_t>& key);

    /**
     * @brief Converts a vector of bytes to a hexadecimal string representation.
     *
     * @param data The vector of bytes.
     * @return std::string The hexadecimal string representation.
     */
    std::string bytesToHex(const std::vector<uint8_t>& data);

    /**
     * @brief Converts a hexadecimal string representation to a vector of bytes.
     *
     * @param hex The string with hexadecimal data.
     * @return std::vector<uint8_t> The vector of bytes.
     * @throws std::runtime_error If the string has an incorrect format.
     */
    std::vector<uint8_t> hexToBytes(const std::string& hex);

    /**
     * @brief Generates cryptographically secure random bytes of the specified length.
     *
     * @param length The number of bytes to generate.
     * @return std::vector<uint8_t> The generated bytes.
     * @throws std::runtime_error If the random byte generation fails.
     */
    std::vector<uint8_t> getRandomBytes(size_t length);

} // namespace Utils

#endif // UTILS_H
